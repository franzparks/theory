public static ArrayList<String> getStringsFromNums(String digits){
    // Create the Phone Key-Mapping
    HashMap<Character, String> mapping = new HashMap<>();
    mapping.put('2', "abc");
    mapping.put('3', "def");
    mapping.put('4', "ghi");
    mapping.put('5', "jkl");
    mapping.put('6', "mno");
    mapping.put('7', "pqrs");
    mapping.put('8', "tuv");
    mapping.put('9', "wxyz");
    
    // Declare a local Phone Node class
    class PhoneNode{
        String word;
        int digitCount;
        PhoneNode(String w, int c){
            word = w;
            digitCount = c;
        }
    }
    
    // Create the stack
    ArrayList<String> out = new ArrayList<>();
    Deque<PhoneNode> stack = new LinkedList<>();
    int len = digits.length();
    
    // Push the first nodes onto the stack
    for(Character c: mapping.get(digits.charAt(0)).toCharArray()){
        stack.addFirst(new PhoneNode(String.valueOf(c), 1));
    }
    
    // Classic DFS
    while(!stack.isEmpty()){
        PhoneNode node = stack.removeFirst();
        if(node.digitCount == len) out.add(node.word);
        else {
            for(Character ch: mapping.get(digits.charAt(node.digitCount)).toCharArray()){
                stack.addFirst(new PhoneNode(node.word + ch, node.digitCount+1));
            }
        }
    }
    return out;
}
