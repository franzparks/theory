// java.util.* has been imported for this problem.
// You don't need any other imports.

public int getNodeDistance(TreeNode root, int n1, int n2) {
    if(root == null) return 0;
    int lenToN1 = pathToNode(root, n1) - 1;
    int lenToN2 = pathToNode(root, n2) - 1;
    
    TreeNode lcaNode = lca(root, n1, n2);
    
    int lenToLCA = pathToNode(root, lcaNode.data) - 1;
    
    return ((lenToN1 + lenToN2 ) - 2 * lenToLCA ) ;
    
    
}

public int pathToNode(TreeNode root, int n1) {
    if (root == null) return 0;
    else {
        int out = 0;
        if ((root.data == n1) || (out = pathToNode(root.left, n1)) > 0
                || (out = pathToNode(root.right, n1)) > 0) {
            return out + 1;
        }
        return 0;
    }
}


public TreeNode lca(TreeNode root, int n1, int n2){
	if(root == null) return null;
	
	TreeNode left = null, right = null;
	
	if(root.data == n1 || root.data == n2){
		return root;
	}
	
	left = lca(root.left, n1, n2);
	right = lca(root.right, n1, n2);
	
	if(left != null && right != null){
		return root;
	}
	
	return (left != null) ? left : right;
}
