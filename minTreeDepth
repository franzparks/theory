// java.util.* has been imported for this problem.
// You don't need any other imports.

public int minTreeDepth(TreeNode root) {
   if(root == null) return 0;
   int count = 1;
   Queue<TreeNode> currentLevel = new LinkedList<TreeNode>();
   Queue<TreeNode> nextLevel = new LinkedList<TreeNode>();
   TreeNode cur = null;
   
   currentLevel.add(root);
   
   while(!currentLevel.isEmpty()){
       
       cur = currentLevel.poll();
       
       if(cur.left == null && cur.right == null){return count;}
       
       if(cur.left != null){
           nextLevel.add(cur.left);
       }
       if(cur.right != null){
           nextLevel.add(cur.right);
       }
       if(currentLevel.isEmpty()){
           ++count;
           currentLevel = nextLevel;
           nextLevel = new LinkedList<TreeNode>();
       }
   }
   
   return count;
}

/*
Write a non-recursive method minTreeDepth that takes in the root node of a Binary Tree and returns the minimum depth of the tree.
The minimum depth is defined as the least number of node traversals needed to reach 
a leaf from the root node. Your method should run in linear O(n) time and use at max O(n) space.
*/
