// java.util.* has been imported for this problem.
// You don't need any other imports.

public static int minTriangleDepth(ArrayList<ArrayList<Integer>> input) {
    if(input == null) return 0;
    
    int min = 0;
    for(ArrayList<Integer> list : input){
        int imin = Integer.MAX_VALUE;
        for(Integer i : list){
            imin = Math.min(i, imin);
        }
        min += imin;
    }
    return min;
}

/*
Given a 'triangle' as an ArrayList of ArrayLists of integers, with each list representing a level of the triangle, find the minimum sum achieved by following a top-down path and adding the integer at each level along the path. Movement is restricted to adjacent numbers from the top to the bottom.

Note:
- You can only traverse through adjacent nodes while moving up or down the triangle.
- An adjacent node is defined as a node that is reached by moving down and left or down and right from a level. For eg, in the triangle shown below, if you are at the digit 3 in the second row, its adjacent nodes are 5 and 6


*/
