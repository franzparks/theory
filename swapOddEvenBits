// java.util.* has been imported for this problem.
// You don't need any other imports.

public int swapOddEvenBits(int x) {
    
    int even = (x & (0xAA)); // Get all even bits of x
    int odd = (x & (0x55)); // Get all odd bits of x
    
    even >>= 1;  // Right shift even bits
    odd <<= 1;  // Left shift odd bits
    
    return (even | odd); // Combine even and odd bits

}

/*Solution 2*/
public static int swapOddEvenBits(int x){
   //Add your code below this line
   return ((x & 0xaaaaaaaa) >> 1 | ((x & 0x5555555) << 1));
   //Add your code above this line
}


/*
Given a 32 bit integer input x, swap its odd and even bits and return the resulting integer. (e.g., bit 0 and bit 1 are swapped, bit 2 and bit 3 are swapped, and so on).

For example:

x = 5, Binary code = 0101
swapOddEvenBits(5) --> 10
*/
